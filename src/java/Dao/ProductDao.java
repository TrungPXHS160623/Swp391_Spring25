package Dao;

import Context.DBContext;
import Dto.ProductDto;
import Entity.Product;
import java.sql.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * DAO Product
 */
public class ProductDao {

    private static final Logger LOGGER = Logger.getLogger(ProductDao.class.getName());

    // L·∫•y t·∫•t c·∫£ c√°c s·∫£n ph·∫©m trong database k√®m ·∫£nh
    public List<ProductDto> getAllProducts() {
        String sql = "SELECT p.*, pi.image_url FROM Products p "
                + "LEFT JOIN ProductImages pi ON p.product_id = pi.product_id AND pi.is_primary = 1 "
                + "ORDER BY p.created_at DESC";
        return getProductList(sql);
    }

    // L·∫•y s·∫£n ph·∫©m m·ªõi nh·∫•t
    public ProductDto getNewestProduct() {
        String sql = "SELECT TOP 1 p.*, pi.image_url FROM Products p "
                + "LEFT JOIN ProductImages pi ON p.product_id = pi.product_id AND pi.is_primary = 1 "
                + "ORDER BY p.created_at DESC";
        return getSingleProduct(sql);
    }

// L·∫•y s·∫£n ph·∫©m c√≥ gi·∫£m gi√° s√¢u nh·∫•t
    public ProductDto getBestDiscountedProduct() {
        String sql = "SELECT TOP 1 p.*, pi.image_url FROM Products p "
                + "LEFT JOIN ProductImages pi ON p.product_id = pi.product_id AND pi.is_primary = 1 "
                + "ORDER BY p.discount_percentage DESC, p.discount_price ASC";
        return getSingleProduct(sql);
    }

// L·∫•y s·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t
    public ProductDto getBestSellingProduct() {
        String sql = "SELECT TOP 1 p.*, pi.image_url FROM Products p "
                + "LEFT JOIN ProductImages pi ON p.product_id = pi.product_id AND pi.is_primary = 1 "
                + "ORDER BY p.sold_quantity DESC";
        return getSingleProduct(sql);
    }

// L·∫•y s·∫£n ph·∫©m ƒë∆∞·ª£c ƒë√°nh gi√° cao nh·∫•t
    public ProductDto getTopRatedProduct() {
        String sql = "SELECT TOP 1 p.*, pi.image_url FROM Products p "
                + "LEFT JOIN ProductImages pi ON p.product_id = pi.product_id AND pi.is_primary = 1 "
                + "ORDER BY p.average_rating DESC, p.sold_quantity DESC";
        return getSingleProduct(sql);
    }

    private ProductDto getSingleProduct(String sql) {
        try (Connection conn = new DBContext().getConnection(); PreparedStatement stmt = conn.prepareStatement(sql); ResultSet rs = stmt.executeQuery()) {
            if (rs.next()) {
                return extractProduct(rs);
            }
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "L·ªói SQL khi l·∫•y s·∫£n ph·∫©m", e);
        } catch (Exception e) {
            LOGGER.log(Level.SEVERE, "L·ªói k·∫øt n·ªëi CSDL", e);
        }
        return null; // Tr·∫£ v·ªÅ null n·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m n√†o
    }

    // Chuy·ªÉn ResultSet th√†nh Product Object
    private ProductDto extractProduct(ResultSet rs) throws SQLException {
        return new ProductDto(
                rs.getInt("product_id"),
                rs.getString("product_name"),
                rs.getString("description"),
                rs.getDouble("price"),
                rs.getInt("stock_quantity"),
                rs.getInt("subcategory_id"),
                rs.getTimestamp("created_at"),
                rs.getTimestamp("updated_at"),
                rs.getDouble("discount_price"),
                rs.getDouble("discount_percentage"),
                rs.getInt("sold_quantity"),
                rs.getDouble("average_rating"),
                rs.getString("image_url") // Th√™m ·∫£nh s·∫£n ph·∫©m
        );
    }

    public List<ProductDto> getProductList(String sql) {
        List<ProductDto> products = new ArrayList<>();
        try (Connection conn = new DBContext().getConnection(); PreparedStatement stmt = conn.prepareStatement(sql); ResultSet rs = stmt.executeQuery()) {

            while (rs.next()) {
                products.add(extractProduct(rs));
            }
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "L·ªói SQL khi l·∫•y s·∫£n ph·∫©m", e);
        } catch (Exception e) {
            LOGGER.log(Level.SEVERE, "L·ªói k·∫øt n·ªëi CSDL", e);
        }
        return products;
    }
public List<ProductDto> getFilteredProducts(String keyword, String[] categories, double minPrice, double maxPrice, String rating, String[] status, String[] discount) {
    StringBuilder sql = new StringBuilder(
        "SELECT p.*, pi.image_url FROM Products p " +
        "LEFT JOIN ProductImages pi ON p.product_id = pi.product_id AND pi.is_primary = 1 " +
        "WHERE 1=1"
    );

    List<Object> params = new ArrayList<>();

    if (keyword != null && !keyword.trim().isEmpty()) {
        sql.append(" AND p.product_name LIKE ?");
        params.add("%" + keyword + "%");
    }

    if (categories != null && categories.length > 0) {
        sql.append(" AND p.subcategory_id IN (" + String.join(",", Collections.nCopies(categories.length, "?")) + ")");
        params.addAll(Arrays.asList(categories));
    }

    if (minPrice > 0 && maxPrice > 0) { // Ki·ªÉm tra n·∫øu gi√° h·ª£p l·ªá
    sql.append(" AND p.price BETWEEN ? AND ?");
    params.add(minPrice); // ‚úÖ Truy·ªÅn tr·ª±c ti·∫øp
    params.add(maxPrice); // ‚úÖ Truy·ªÅn tr·ª±c ti·∫øp
    }

    if (rating != null) {
        sql.append(" AND p.average_rating >= ?");
        params.add(Integer.parseInt(rating));
    }

    if (status != null) {
        sql.append(" AND p.stock_quantity > 0");
    }

    if (discount != null) {
        sql.append(" AND p.discount_percentage > 0");
    }

    sql.append(" ORDER BY p.created_at DESC");

    return executeProductQuery(sql.toString(), params);
}

private List<ProductDto> executeProductQuery(String sql, List<Object> params) {
    List<ProductDto> products = new ArrayList<>();
    try (Connection conn = new DBContext().getConnection();
         PreparedStatement stmt = conn.prepareStatement(sql)) {

        for (int i = 0; i < params.size(); i++) {
            stmt.setObject(i + 1, params.get(i));
        }

        try (ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                products.add(extractProduct(rs));
            }
        }
    } catch (SQLException e) {
        LOGGER.log(Level.SEVERE, "L·ªói SQL khi l·∫•y danh s√°ch s·∫£n ph·∫©m", e);
    }catch (Exception e) {
            LOGGER.log(Level.SEVERE, "L·ªói k·∫øt n·ªëi CSDL", e);
        }
    return products;
}

    // Test DAO v·ªõi h√†m main
    public static void main(String[] args) {
//        ProductDao dao = new ProductDao();
//
////        System.out.println("üÜï S·∫£n ph·∫©m m·ªõi nh·∫•t:");
////        printProduct(dao.getNewestProduct());
////
////        System.out.println("\nüí∞ S·∫£n ph·∫©m gi·∫£m gi√° s√¢u nh·∫•t:");
////        printProduct(dao.getBestDiscountedProduct());
////
////        System.out.println("\nüî• S·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t:");
////        printProduct(dao.getBestSellingProduct());
////
////        System.out.println("\n‚≠ê S·∫£n ph·∫©m ƒë∆∞·ª£c ƒë√°nh gi√° cao nh·∫•t:");
////        printProduct(dao.getTopRatedProduct());
//        
//        List<ProductDto> products = dao.getAllProducts(); // L·∫•y danh s√°ch s·∫£n ph·∫©m
//
//        if (products.isEmpty()) {
//            System.out.println("Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o trong database.");
//        } else {
//            System.out.println("Danh s√°ch s·∫£n ph·∫©m:");
//            for (ProductDto product : products) {
//                System.out.println(product);
//            }
//        }
        ProductDao productDao = new ProductDao();

        // D·ªØ li·ªáu test
        String keyword = "Laptop";
        String[] categories = {"1", "2"}; // ID c·ªßa danh m·ª•c
        double minPrice = 5000.00;
        double maxPrice = 20000.00;
        String rating = "4"; // √çt nh·∫•t 4 sao
        String[] status = {"available"}; // Ch·ªâ l·∫•y s·∫£n ph·∫©m c√≤n h√†ng
        String[] discount = {"onsale"}; // Ch·ªâ l·∫•y s·∫£n ph·∫©m ƒëang gi·∫£m gi√°

        // G·ªçi h√†m l·∫•y s·∫£n ph·∫©m theo b·ªô l·ªçc
        List<ProductDto> filteredProducts = productDao.getFilteredProducts(keyword, categories, minPrice, maxPrice, rating, status, discount);

        // In k·∫øt qu·∫£
        System.out.println("S·ªë l∆∞·ª£ng s·∫£n ph·∫©m t√¨m th·∫•y: " + filteredProducts.size());
        for (ProductDto product : filteredProducts) {
            System.out.println("ID: " + product.getProductId() +
                    " | T√™n: " + product.getProductName() +
                    " | Gi√°: " + product.getPrice() +
                    " | ƒê√°nh gi√°: " + product.getAverageRating() +
                    " | ·∫¢nh: " + product.getImageUrl());
        }
    
    }

// H√†m h·ªó tr·ª£ in th√¥ng tin s·∫£n ph·∫©m
    private static void printProduct(ProductDto product) {
        if (product != null) {
            System.out.println(product);
        } else {
            System.out.println("‚ö† Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o.");
        }
    }
}